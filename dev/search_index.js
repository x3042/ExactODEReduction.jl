var documenterSearchIndex = {"docs":
[{"location":"guide/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"find_reductions","category":"page"},{"location":"interface/#ExactODEReduction.find_reductions","page":"Interface","title":"ExactODEReduction.find_reductions","text":"find_reductions(system::ODE; overQ=true, makepositive=false, loglevel=Logging.Info)\n\nFinds reductions of the system corresponding to a Jordan-Hoelder filtration. This means that the reduction form a chain, and there are no extra intermediate reduction in this chain. In particular, if there exists at least one reduction, it will be found.\n\nArguments:\n\nsystem is an ODE system given as ODE object,\noverQ tells the algorithm to search for reductions over rational numbers,\nmakepositive tells the algorithm to search for reductions with positive coefficients. \n\nTo enable this argument, you should have Polymake.jl imported. \n\nExample:\n\njulia> using ExactODEReduction\njulia> odes = @ODEsystem(\n    x'(t) = x + y,\n    y'(t) = x - y - z,\n    z'(t) = 2x - z\n)\njulia> find_reductions(odes)\n2-element Vector{Dict{Symbol, Any}}:\n Dict(:new_system => y1'(t) = 0\n, :new_vars => Nemo.fmpq_mpoly[y - z + x])\n Dict(:new_system => y2'(t) = -y1(t) - y2(t)\ny1'(t) = -y1(t) - y2(t)\n, :new_vars => Nemo.fmpq_mpoly[y, z - x])\n\n\n\n\n\n","category":"function"},{"location":"interface/","page":"Interface","title":"Interface","text":"find_smallest_constrained_reduction","category":"page"},{"location":"interface/#ExactODEReduction.find_smallest_constrained_reduction","page":"Interface","title":"ExactODEReduction.find_smallest_constrained_reduction","text":"find_smallest_constrained_reduction(system::ODE, observables; overQ=true, makepositive=false, loglevel=Logging.Info)\n\nFinds the best linear reduction of the system. If there exists a reduction, it will be found. Arguments:\n\nsystem is an ODE system given as ODE object,\nobservables is a list of linear functions of initial variables  desired to be preserved by reduction,\noverQ tells the algorithm to search for reductions over rational numbers,\nmakepositive tells the algorithm to search for reductions with positive coefficients;\n\nTo enable this argument, you should have Polymake.jl imported. \n\nExample:\n\njulia> using ExactODEReduction\njulia> odes = @ODEsystem(\n    x'(t) = x + y,\n    y'(t) = x - y - z,\n    z'(t) = 2x - z\n)\njulia> find_smallest_constrained_reduction(odes, [2x + z])\nDict{Symbol, Any} with 2 entries:\n  :new_system => y2'(t) = 2*y1(t) - y2(t)…\n  :new_vars   => Nemo.fmpq_mpoly[y + 3*x, z + 2*x]\n\n\n\n\n\n","category":"function"},{"location":"interface/","page":"Interface","title":"Interface","text":"find_some_reduction","category":"page"},{"location":"interface/#ExactODEReduction.find_some_reduction","page":"Interface","title":"ExactODEReduction.find_some_reduction","text":"find_some_reduction(system::ODE, observables; overQ=true, makepositive=false, loglevel=Logging.Info)\n\nFinds a nontrivial linear reduction of the system. If there exists a reduction, it will be found.\n\nArguments:\n\nsystem is an ODE system given as ODE object,\noverQ tells the algorithm to search for reductions over rational numbers,\nmakepositive tells the algorithm to search for reductions with positive coefficients;\n\nTo enable this argument, you should have Polymake.jl imported. \n\nExample:\n\njulia> using ExactODEReduction\njulia> odes = @ODEsystem(\n    x'(t) = x + y,\n    y'(t) = x - y - z,\n    z'(t) = 2x - z\n)\njulia> find_some_reduction(odes)\nDict{Symbol, Any} with 2 entries:\n  :new_system => y2'(t) = -y1(t) - y2(t)…\n  :new_vars   => Nemo.fmpq_mpoly[y, z - x]\n\n\n\n\n\n","category":"function"},{"location":"#ExactODEReduction.jl","page":"ExactODEReduction","title":"ExactODEReduction.jl","text":"","category":"section"},{"location":"","page":"ExactODEReduction","title":"ExactODEReduction","text":"The package provides an algorithm for computing exact linear reductions of ODE systems. It allows computing a longest possible chain of reductions corresponding to a Jordan-Hoelder filtration over rational numbers or its extension.","category":"page"},{"location":"","page":"ExactODEReduction","title":"ExactODEReduction","text":"See the Guide section for a quick introduction and an example.","category":"page"},{"location":"#Installation","page":"ExactODEReduction","title":"Installation","text":"","category":"section"},{"location":"","page":"ExactODEReduction","title":"ExactODEReduction","text":"The package works with Julia version 1.6+. To install Exact-reduction-of-ODE-systems, run the following command in Julia:","category":"page"},{"location":"","page":"ExactODEReduction","title":"ExactODEReduction","text":"import Pkg\nPkg.add(url=\"https://github.com/x3042/Exact-reduction-of-ODE-systems\")","category":"page"},{"location":"","page":"ExactODEReduction","title":"ExactODEReduction","text":"The dependency on polymake is optional; it is loaded lazily if necessary, and most of the package functionality works without it.","category":"page"}]
}
