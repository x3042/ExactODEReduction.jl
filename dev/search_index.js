var documenterSearchIndex = {"docs":
[{"location":"guide/#Guide","page":"Guide","title":"Guide","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"Wowowow","category":"page"},{"location":"interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"find_reductions","category":"page"},{"location":"interface/#ExactODEReduction.find_reductions","page":"Interface","title":"ExactODEReduction.find_reductions","text":"find_reductions(system::ODE; overQ=true, makepositive=false, loglevel=Logging.Info)\n\nFinds reductions of the system corresponding to a Jordan-Hoelder filtration. This means that the reduction form a chain, and there are no extra intermediate reduction in this chain. In particular, if there exists at least one reduction, it will be found.\n\nArguments:\n\nsystem is an ODE system given as ODE object,\noverQ tells the algorithm to search for reductions over rational numbers,\nmakepositive tells the algorithm to search for reductions with positive coefficients. \n\nTo enable this argument, you should have Polymake.jl imported. \n\nExample:\n\nusing ExactODEReduction\nodes = @ODEsystem(\n    x'(t) = x + y,\n    y'(t) = x - y - z,\n    z'(t) = 2x - z\n)\nfind_reductions(odes)\n\n\n\n\n\n","category":"function"},{"location":"interface/","page":"Interface","title":"Interface","text":"find_smallest_constrained_reduction","category":"page"},{"location":"interface/#ExactODEReduction.find_smallest_constrained_reduction","page":"Interface","title":"ExactODEReduction.find_smallest_constrained_reduction","text":"find_smallest_constrained_reduction(system::ODE, observables; overQ=true, makepositive=false, loglevel=Logging.Info)\n\nFinds the best linear reduction of the system. If there exists a reduction, it will be found. Arguments:\n\nsystem is an ODE system given as ODE object,\nobservables is a list of linear functions of initial variables  desired to be preserved by reduction,\noverQ tells the algorithm to search for reductions over rational numbers,\nmakepositive tells the algorithm to search for reductions with positive coefficients;\n\nTo enable this argument, you should have Polymake.jl imported. \n\nExample:\n\nusing ExactODEReduction\nodes = @ODEsystem(\n    x'(t) = x + y,\n    y'(t) = x - y - z,\n    z'(t) = 2x - z\n)\nfind_smallest_constrained_reduction(odes, [y])\n\n\n\n\n\n","category":"function"},{"location":"interface/","page":"Interface","title":"Interface","text":"find_some_reduction","category":"page"},{"location":"interface/#ExactODEReduction.find_some_reduction","page":"Interface","title":"ExactODEReduction.find_some_reduction","text":"find_some_reduction(system::ODE, observables; overQ=true, makepositive=false, loglevel=Logging.Info)\n\nFinds a nontrivial linear reduction of the system. If there exists a reduction, it will be found.\n\nArguments:\n\nsystem is an ODE system given as ODE object,\noverQ tells the algorithm to search for reductions over rational numbers,\nmakepositive tells the algorithm to search for reductions with positive coefficients;\n\nTo enable this argument, you should have Polymake.jl imported. \n\nExample:\n\nusing ExactODEReduction\nodes = @ODEsystem(\n    x'(t) = x + y,\n    y'(t) = x - y - z,\n    z'(t) = 2x - z\n)\nfind_some_reduction(odes)\n\n\n\n\n\n","category":"function"},{"location":"#ExactODEReduction.jl","page":"ExactODEReduction","title":"ExactODEReduction.jl","text":"","category":"section"},{"location":"","page":"ExactODEReduction","title":"ExactODEReduction","text":"The package ","category":"page"},{"location":"","page":"ExactODEReduction","title":"ExactODEReduction","text":"See Guide section for the short usage guide.","category":"page"}]
}
